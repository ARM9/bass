arch(n64_cpu) = R"(

// N64 MIPS 4300 CPU Scalar Instructions (CPU):
nop ; %000000 %00 %00000000 %00000000 %00 %000000
syscall *01 ; %000000 >>19a >>18a >>17a >>16a >>15a >>14a >>13a >>12a >>11a >>10a >>09a >>08a >>07a >>06a >>05a >>04a >>03a >>02a >>01a ~a %001100
break *01   ; %000000 >>19a >>18a >>17a >>16a >>15a >>14a >>13a >>12a >>11a >>10a >>09a >>08a >>07a >>06a >>05a >>04a >>03a >>02a >>01a ~a %001101
sync ; %000000 %00 %00000000 %00000000 %00 %001111

sll *01,*05,*01 ; %00000000 %000 ~b >>04a >>03a >>02a >>01a ~a >>04c >>03c >>02c >>01c ~c %000000
srl *01,*05,*01 ; %00000000 %000 ~b >>04a >>03a >>02a >>01a ~a >>04c >>03c >>02c >>01c ~c %000010
sra *01,*05,*01 ; %00000000 %000 ~b >>04a >>03a >>02a >>01a ~a >>04c >>03c >>02c >>01c ~c %000011

sllv *05,*01,*01 ; %000000 >>04c >>03c >>02c >>01c ~c >>04b >>03b >>02b >>01b ~b ~a %000 %00000100
srlv *05,*01,*01 ; %000000 >>04c >>03c >>02c >>01c ~c >>04b >>03b >>02b >>01b ~b ~a %000 %00000110
srav *05,*01,*01 ; %000000 >>04c >>03c >>02c >>01c ~c >>04b >>03b >>02b >>01b ~b ~a %000 %00000111

mfhi *05 ; %000000 %00 %00000000 ~a %000 %00010000
mthi *05 ; %000000 %00 %00000000 ~a %000 %00010001
mflo *05 ; %000000 %00 %00000000 ~a %000 %00010010
mtlo *05 ; %000000 %00 %00000000 ~a %000 %00010011

dsllv *05,*01,*01 ; %000000 >>04c >>03c >>02c >>01c ~c >>04b >>03b >>02b >>01b ~b ~a %000 %00010100
dsrlv *05,*01,*01 ; %000000 >>04c >>03c >>02c >>01c ~c >>04b >>03b >>02b >>01b ~b ~a %000 %00010110
dsrav *05,*01,*01 ; %000000 >>04c >>03c >>02c >>01c ~c >>04b >>03b >>02b >>01b ~b ~a %000 %00010111

dsll *01,*05,*01   ; %00000000 %000 ~b >>04a >>03a >>02a >>01a ~a >>04c >>03c >>02c >>01c ~c %111000
dsrl *01,*05,*01   ; %00000000 %000 ~b >>04a >>03a >>02a >>01a ~a >>04c >>03c >>02c >>01c ~c %111010
dsra *01,*05,*01   ; %00000000 %000 ~b >>04a >>03a >>02a >>01a ~a >>04c >>03c >>02c >>01c ~c %111011

dsll32 *01,*05,*01 ; %00000000 %000 ~b >>04a >>03a >>02a >>01a ~a >>04c >>03c >>02c >>01c ~c %111100
dsrl32 *01,*05,*01 ; %00000000 %000 ~b >>04a >>03a >>02a >>01a ~a >>04c >>03c >>02c >>01c ~c %111110
dsra32 *01,*05,*01 ; %00000000 %000 ~b >>04a >>03a >>02a >>01a ~a >>04c >>03c >>02c >>01c ~c %111111

mult *01,*05   ; %000000 >>04a >>03a >>02a >>01a ~a ~b %00000000 %00011000
multu *01,*05  ; %000000 >>04a >>03a >>02a >>01a ~a ~b %00000000 %00011001
div *01,*05    ; %000000 >>04a >>03a >>02a >>01a ~a ~b %00000000 %00011010
divu *01,*05   ; %000000 >>04a >>03a >>02a >>01a ~a ~b %00000000 %00011011
dmult *01,*05  ; %000000 >>04a >>03a >>02a >>01a ~a ~b %00000000 %00011100
dmultu *01,*05 ; %000000 >>04a >>03a >>02a >>01a ~a ~b %00000000 %00011101
ddiv *01,*05   ; %000000 >>04a >>03a >>02a >>01a ~a ~b %00000000 %00011110
ddivu *01,*05  ; %000000 >>04a >>03a >>02a >>01a ~a ~b %00000000 %00011111

add *05,*01,*01   ; %000000 >>04b >>03b >>02b >>01b ~b >>04c >>03c >>02c >>01c ~c ~a %000 %00100000
addu *05,*01,*01  ; %000000 >>04b >>03b >>02b >>01b ~b >>04c >>03c >>02c >>01c ~c ~a %000 %00100001
sub *05,*01,*01   ; %000000 >>04b >>03b >>02b >>01b ~b >>04c >>03c >>02c >>01c ~c ~a %000 %00100010
subu *05,*01,*01  ; %000000 >>04b >>03b >>02b >>01b ~b >>04c >>03c >>02c >>01c ~c ~a %000 %00100011
and *05,*01,*01   ; %000000 >>04b >>03b >>02b >>01b ~b >>04c >>03c >>02c >>01c ~c ~a %000 %00100100
or *05,*01,*01    ; %000000 >>04b >>03b >>02b >>01b ~b >>04c >>03c >>02c >>01c ~c ~a %000 %00100101
xor *05,*01,*01   ; %000000 >>04b >>03b >>02b >>01b ~b >>04c >>03c >>02c >>01c ~c ~a %000 %00100110
nor *05,*01,*01   ; %000000 >>04b >>03b >>02b >>01b ~b >>04c >>03c >>02c >>01c ~c ~a %000 %00100111

slt *05,*01,*01   ; %000000 >>04b >>03b >>02b >>01b ~b >>04c >>03c >>02c >>01c ~c ~a %000 %00101010
sltu *05,*01,*01  ; %000000 >>04b >>03b >>02b >>01b ~b >>04c >>03c >>02c >>01c ~c ~a %000 %00101011
dadd *05,*01,*01  ; %000000 >>04b >>03b >>02b >>01b ~b >>04c >>03c >>02c >>01c ~c ~a %000 %00101100
daddu *05,*01,*01 ; %000000 >>04b >>03b >>02b >>01b ~b >>04c >>03c >>02c >>01c ~c ~a %000 %00101101
dsub *05,*01,*01  ; %000000 >>04b >>03b >>02b >>01b ~b >>04c >>03c >>02c >>01c ~c ~a %000 %00101110
dsubu *05,*01,*01 ; %000000 >>04b >>03b >>02b >>01b ~b >>04c >>03c >>02c >>01c ~c ~a %000 %00101111

tge *01,*05,*01  ; %000000 >>04a >>03a >>02a >>01a ~a ~b >>09c >>08c >>07c >>06c >>05c >>04c >>03c >>02c >>01c ~c %110000
tgeu *01,*05,*01 ; %000000 >>04a >>03a >>02a >>01a ~a ~b >>09c >>08c >>07c >>06c >>05c >>04c >>03c >>02c >>01c ~c %110001
tlt *01,*05,*01  ; %000000 >>04a >>03a >>02a >>01a ~a ~b >>09c >>08c >>07c >>06c >>05c >>04c >>03c >>02c >>01c ~c %110010
tltu *01,*05,*01 ; %000000 >>04a >>03a >>02a >>01a ~a ~b >>09c >>08c >>07c >>06c >>05c >>04c >>03c >>02c >>01c ~c %110011
teq *01,*05,*01  ; %000000 >>04a >>03a >>02a >>01a ~a ~b >>09c >>08c >>07c >>06c >>05c >>04c >>03c >>02c >>01c ~c %110100
tne *01,*05,*01  ; %000000 >>04a >>03a >>02a >>01a ~a ~b >>09c >>08c >>07c >>06c >>05c >>04c >>03c >>02c >>01c ~c %110110

bltz *01,*18    ; %000001 >>04a >>03a >>02a >>01a ~a %00000 +4>>02b
bgez *01,*18    ; %000001 >>04a >>03a >>02a >>01a ~a %00001 +4>>02b
bltzl *01,*18   ; %000001 >>04a >>03a >>02a >>01a ~a %00010 +4>>02b
bgezl *01,*18   ; %000001 >>04a >>03a >>02a >>01a ~a %00011 +4>>02b
bltzal *01,*18  ; %000001 >>04a >>03a >>02a >>01a ~a %10000 +4>>02b
bgezal *01,*18  ; %000001 >>04a >>03a >>02a >>01a ~a %10001 +4>>02b
bltzall *01,*18 ; %000001 >>04a >>03a >>02a >>01a ~a %10010 +4>>02b
bgezall *01,*18 ; %000001 >>04a >>03a >>02a >>01a ~a %10011 +4>>02b
blez *01,*18    ; %000110 >>04a >>03a >>02a >>01a ~a %00000 +4>>02b
bgtz *01,*18    ; %000111 >>04a >>03a >>02a >>01a ~a %00000 +4>>02b
blezl *01,*18   ; %010110 >>04a >>03a >>02a >>01a ~a %00000 +4>>02b
bgtzl *01,*18   ; %010111 >>04a >>03a >>02a >>01a ~a %00000 +4>>02b

beq *01,*05,*18  ; %000100 >>04a >>03a >>02a >>01a ~a ~b +4>>02c
bne *01,*05,*18  ; %000101 >>04a >>03a >>02a >>01a ~a ~b +4>>02c
beql *01,*05,*18 ; %010100 >>04a >>03a >>02a >>01a ~a ~b +4>>02c
bnel *01,*05,*18 ; %010101 >>04a >>03a >>02a >>01a ~a ~b +4>>02c

j *01   ; %00001000 >>25a >>24a >>23a >>22a >>21a >>20a >>19a >>18a >>17a >>16a >>15a >>14a >>13a >>12a >>11a >>10a >>09a >>08a >>07a >>06a >>05a >>04a >>03a >>02a
jal *01 ; %00001100 >>25a >>24a >>23a >>22a >>21a >>20a >>19a >>18a >>17a >>16a >>15a >>14a >>13a >>12a >>11a >>10a >>09a >>08a >>07a >>06a >>05a >>04a >>03a >>02a

jr *01       ; %000000 >>04a >>03a >>02a >>01a ~a %00000 %00000 %000 %00001000
jalr *05,*01 ; %000000 >>04b >>03b >>02b >>01b ~b %00000 ~a %000 %00001001
jalr *01     ; %000000 >>04a >>03a >>02a >>01a ~a %00000 %11111 %000 %00001001

tgei *01,*08  ; %000001 >>04a >>03a >>02a >>01a ~a %01000 >>08b ~b
tgeiu *01,*08 ; %000001 >>04a >>03a >>02a >>01a ~a %01001 >>08b ~b
tlti *01,*08  ; %000001 >>04a >>03a >>02a >>01a ~a %01010 >>08b ~b
tltiu *01,*08 ; %000001 >>04a >>03a >>02a >>01a ~a %01011 >>08b ~b
teqi *01,*08  ; %000001 >>04a >>03a >>02a >>01a ~a %01100 >>08b ~b
tnei *01,*08  ; %000001 >>04a >>03a >>02a >>01a ~a %01110 >>08b ~b

addi *05,*01,*08  ; %001000 >>04b >>03b >>02b >>01b ~b ~a >>08c ~c
addiu *05,*01,*08 ; %001001 >>04b >>03b >>02b >>01b ~b ~a >>08c ~c
slti *05,*01,*08  ; %001010 >>04b >>03b >>02b >>01b ~b ~a >>08c ~c
sltiu *05,*01,*08 ; %001011 >>04b >>03b >>02b >>01b ~b ~a >>08c ~c
andi *05,*01,*08  ; %001100 >>04b >>03b >>02b >>01b ~b ~a >>08c ~c
ori *05,*01,*08   ; %001101 >>04b >>03b >>02b >>01b ~b ~a >>08c ~c
xori *05,*01,*08  ; %001110 >>04b >>03b >>02b >>01b ~b ~a >>08c ~c

daddi *05,*01,*08  ; %011000 >>04b >>03b >>02b >>01b ~b ~a >>08c ~c
daddiu *05,*01,*08 ; %011001 >>04b >>03b >>02b >>01b ~b ~a >>08c ~c

// N64 MIPS 4300 CPU Branch On Coprocessor Instructions (COPz):
bc0f *18  ; %010000 %01 %000 %00000 +4>>02a
bc1f *18  ; %010001 %01 %000 %00000 +4>>02a
bc0t *18  ; %010000 %01 %000 %00001 +4>>02a
bc1t *18  ; %010001 %01 %000 %00001 +4>>02a
bc0fl *18 ; %010000 %01 %000 %00010 +4>>02a
bc1fl *18 ; %010001 %01 %000 %00010 +4>>02a
bc0tl *18 ; %010000 %01 %000 %00011 +4>>02a
bc1tl *18 ; %010001 %01 %000 %00011 +4>>02a

// N64 MIPS 4300 CPU Scalar Load Instructions (CPU):
lui *05,*08       ; %00111100 %000 ~a >>08b ~b
ldl *05,*08(*01)  ; %011010 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
ldr *05,*08(*01)  ; %011011 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
lb *05,*08(*01)   ; %100000 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
lh *05,*08(*01)   ; %100001 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
lwl *05,*08(*01)  ; %100010 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
lw *05,*08(*01)   ; %100011 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
lbu *05,*08(*01)  ; %100100 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
lhu *05,*08(*01)  ; %100101 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
lwr *05,*08(*01)  ; %100110 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
lwu *05,*08(*01)  ; %100111 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
ll *05,*08(*01)   ; %110000 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
lwc1 *05,*08(*01) ; %110001 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
lld *05,*08(*01)  ; %110100 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
ldc1 *05,*08(*01) ; %110101 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
ld *05,*08(*01)   ; %110111 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b

// N64 MIPS 4300 CPU Scalar Store Instructions (CPU):
sb *05,*08(*01)   ; %101000 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
sh *05,*08(*01)   ; %101001 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
swl *05,*08(*01)  ; %101010 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
sw *05,*08(*01)   ; %101011 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
sdl *05,*08(*01)  ; %101100 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
sdr *05,*08(*01)  ; %101101 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
swr *05,*08(*01)  ; %101110 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
sc *05,*08(*01)   ; %111000 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
swc1 *05,*08(*01) ; %111001 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
scd *05,*08(*01)  ; %111100 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
sdc1 *05,*08(*01) ; %111101 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
sd *05,*08(*01)   ; %111111 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b

cache *05,*08(*01) ; %101111 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b

// N64 CP0 Control Instructions (COP0):
mfc0 *05,*05  ; %01000000 %000 ~a ~b %000 %00000000
dmfc0 *05,*05 ; %01000000 %001 ~a ~b %000 %00000000
mtc0 *05,*05  ; %01000000 %100 ~a ~b %000 %00000000
dmtc0 *05,*05 ; %01000000 %101 ~a ~b %000 %00000000

// N64 CP1 Control Instructions (COP1):
mfc1 *05,*05  ; %01000100 %000 ~a ~b %000 %00000000
dmfc1 *05,*05 ; %01000100 %001 ~a ~b %000 %00000000
mtc1 *05,*05  ; %01000100 %100 ~a ~b %000 %00000000
dmtc1 *05,*05 ; %01000100 %101 ~a ~b %000 %00000000
cfc1 *05,*05  ; %01000100 %010 ~a ~b %000 %00000000
ctc1 *05,*05  ; %01000100 %110 ~a ~b %000 %00000000

tlbr  ; %01000010 %00000000 %00000000 %00000001
tlbwi ; %01000010 %00000000 %00000000 %00000010
tlbwr ; %01000010 %00000000 %00000000 %00000110
tlbp  ; %01000010 %00000000 %00000000 %00001000
eret  ; %01000010 %00000000 %00000000 %00011000

cop0 *01 ; %0100001 >>24a >>23a >>22a >>21a >>20a >>19a >>18a >>17a >>16a >>15a >>14a >>13a >>12a >>11a >>10a >>09a >>08a >>07a >>06a >>05a >>04a >>03a >>02a >>01a ~a
cop1 *01 ; %0100011 >>24a >>23a >>22a >>21a >>20a >>19a >>18a >>17a >>16a >>15a >>14a >>13a >>12a >>11a >>10a >>09a >>08a >>07a >>06a >>05a >>04a >>03a >>02a >>01a ~a

// N64 CP1 Floating Point Unit (FPU) Instructions (COP1):

)";
