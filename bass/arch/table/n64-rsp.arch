arch(n64_rsp) = R"(

// RSP MIPS 4000 CPU Scalar Instructions (CPU):
nop   ; %000000 %00 %00000000 %00000000 %00 %000000
break ; %000000 %00 %00000000 %00000000 %00 %001101

sll *01,*05,*01 ; %00000000 %000 ~b >>04a >>03a >>02a >>01a ~a >>04c >>03c >>02c >>01c ~c %000000
srl *01,*05,*01 ; %00000000 %000 ~b >>04a >>03a >>02a >>01a ~a >>04c >>03c >>02c >>01c ~c %000010
sra *01,*05,*01 ; %00000000 %000 ~b >>04a >>03a >>02a >>01a ~a >>04c >>03c >>02c >>01c ~c %000011

sllv *05,*01,*01 ; %000000 >>04c >>03c >>02c >>01c ~c >>04b >>03b >>02b >>01b ~b ~a %000 %00000100
srlv *05,*01,*01 ; %000000 >>04c >>03c >>02c >>01c ~c >>04b >>03b >>02b >>01b ~b ~a %000 %00000110
srav *05,*01,*01 ; %000000 >>04c >>03c >>02c >>01c ~c >>04b >>03b >>02b >>01b ~b ~a %000 %00000111

add *05,*01,*01  ; %000000 >>04b >>03b >>02b >>01b ~b >>04c >>03c >>02c >>01c ~c ~a %000 %00100000
addu *05,*01,*01 ; %000000 >>04b >>03b >>02b >>01b ~b >>04c >>03c >>02c >>01c ~c ~a %000 %00100001
sub *05,*01,*01  ; %000000 >>04b >>03b >>02b >>01b ~b >>04c >>03c >>02c >>01c ~c ~a %000 %00100010
subu *05,*01,*01 ; %000000 >>04b >>03b >>02b >>01b ~b >>04c >>03c >>02c >>01c ~c ~a %000 %00100011
and *05,*01,*01  ; %000000 >>04b >>03b >>02b >>01b ~b >>04c >>03c >>02c >>01c ~c ~a %000 %00100100
or *05,*01,*01   ; %000000 >>04b >>03b >>02b >>01b ~b >>04c >>03c >>02c >>01c ~c ~a %000 %00100101
xor *05,*01,*01  ; %000000 >>04b >>03b >>02b >>01b ~b >>04c >>03c >>02c >>01c ~c ~a %000 %00100110
nor *05,*01,*01  ; %000000 >>04b >>03b >>02b >>01b ~b >>04c >>03c >>02c >>01c ~c ~a %000 %00100111

slt *05,*01,*01  ; %000000 >>04b >>03b >>02b >>01b ~b >>04c >>03c >>02c >>01c ~c ~a %000 %00101010
sltu *05,*01,*01 ; %000000 >>04b >>03b >>02b >>01b ~b >>04c >>03c >>02c >>01c ~c ~a %000 %00101011

bltz *01,*18   ; %000001 >>04a >>03a >>02a >>01a ~a %00000 +4>>02b
bgez *01,*18   ; %000001 >>04a >>03a >>02a >>01a ~a %00001 +4>>02b
bltzal *01,*18 ; %000001 >>04a >>03a >>02a >>01a ~a %10000 +4>>02b
bgezal *01,*18 ; %000001 >>04a >>03a >>02a >>01a ~a %10001 +4>>02b
blez *01,*18   ; %000110 >>04a >>03a >>02a >>01a ~a %00000 +4>>02b
bgtz *01,*18   ; %000111 >>04a >>03a >>02a >>01a ~a %00000 +4>>02b

beq *01,*05,*18 ; %000100 >>04a >>03a >>02a >>01a ~a ~b +4>>02c
bne *01,*05,*18 ; %000101 >>04a >>03a >>02a >>01a ~a ~b +4>>02c

j *01   ; %00001000 >>25a >>24a >>23a >>22a >>21a >>20a >>19a >>18a >>17a >>16a >>15a >>14a >>13a >>12a >>11a >>10a >>09a >>08a >>07a >>06a >>05a >>04a >>03a >>02a
jal *01 ; %00001100 >>25a >>24a >>23a >>22a >>21a >>20a >>19a >>18a >>17a >>16a >>15a >>14a >>13a >>12a >>11a >>10a >>09a >>08a >>07a >>06a >>05a >>04a >>03a >>02a

jr *01       ; %000000 >>04a >>03a >>02a >>01a ~a %00000 %00000 %000 %00001000
jalr *05,*01 ; %000000 >>04b >>03b >>02b >>01b ~b %00000 ~a %000 %00001001
jalr *01     ; %000000 >>04a >>03a >>02a >>01a ~a %00000 %11111 %000 %00001001

addi *05,*01,*08  ; %001000 >>04b >>03b >>02b >>01b ~b ~a >>08c ~c
addiu *05,*01,*08 ; %001001 >>04b >>03b >>02b >>01b ~b ~a >>08c ~c
slti *05,*01,*08  ; %001010 >>04b >>03b >>02b >>01b ~b ~a >>08c ~c
sltiu *05,*01,*08 ; %001011 >>04b >>03b >>02b >>01b ~b ~a >>08c ~c
andi *05,*01,*08  ; %001100 >>04b >>03b >>02b >>01b ~b ~a >>08c ~c
ori *05,*01,*08   ; %001101 >>04b >>03b >>02b >>01b ~b ~a >>08c ~c
xori *05,*01,*08  ; %001110 >>04b >>03b >>02b >>01b ~b ~a >>08c ~c

// RSP MIPS 4000 CPU Scalar Load Instructions (CPU):
lui *05,*08      ; %00111100 %000 ~a >>08b ~b
lb *05,*08(*01)  ; %100000 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
lh *05,*08(*01)  ; %100001 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
lw *05,*08(*01)  ; %100011 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
lbu *05,*08(*01) ; %100100 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
lhu *05,*08(*01) ; %100101 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b

// RSP MIPS 4000 CPU Scalar Store Instructions (CPU):
sb *05,*08(*01) ; %101000 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
sh *05,*08(*01) ; %101001 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b
sw *05,*08(*01) ; %101011 >>04c >>03c >>02c >>01c ~c ~a >>08b ~b

// RSP CP0 Control Instructions (COP0):
mfc0 *05,*05 ; %01000000 %000 ~a ~b %000 %00000000
mtc0 *05,*05 ; %01000000 %100 ~a ~b %000 %00000000

// RSP CP2 Control Instructions (COP2):
mfc2 *05,v*05[e*01] ; %01001000 %000 ~a ~b >>03c >>02c >>01c ~c %0000000
mtc2 *05,v*05[e*01] ; %01001000 %100 ~a ~b >>03c >>02c >>01c ~c %0000000
cfc2 *05,*05        ; %01001000 %010 ~a ~b %000 %00000000
ctc2 *05,*05        ; %01001000 %110 ~a ~b %000 %00000000

// RSP CP2 Vector Operation Matrix Instructions (COP2):
vmulf v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %000000
vmulu v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %000001
vrndp v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %000010
vmulq v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %000011
vmudl v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %000100
vmudm v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %000101
vmudn v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %000110
vmudh v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %000111

vmacf v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %001000
vmacu v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %001001
vrndn v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %001010
vmacq v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %001011
vmadl v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %001100
vmadm v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %001101
vmadn v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %001110
vmadh v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %001111

vadd v*01,v*05,v*05[e*01]  ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %010000
vsub v*01,v*05,v*05[e*01]  ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %010001
vsut v*01,v*05,v*05[e*01]  ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %010010
vabs v*01,v*05,v*05[e*01]  ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %010011
vaddc v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %010100
vsubc v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %010101
vaddb v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %010110
vsubb v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %010111
vaccb v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %011000
vsucb v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %011001
vsad v*01,v*05,v*05[e*01]  ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %011010
vsac v*01,v*05,v*05[e*01]  ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %011011
vsum v*01,v*05,v*05[e*01]  ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %011100
vsar v*01,v*05,v*05[e*01]  ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %011101
vacc v*01,v*05,v*05[e*01]  ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %011110
vsuc v*01,v*05,v*05[e*01]  ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %011111

vlt v*01,v*05,v*05[e*01]   ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %100000
veq v*01,v*05,v*05[e*01]   ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %100001
vne v*01,v*05,v*05[e*01]   ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %100010
vge v*01,v*05,v*05[e*01]   ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %100011
vcl v*01,v*05,v*05[e*01]   ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %100100
vch v*01,v*05,v*05[e*01]   ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %100101
vcr v*01,v*05,v*05[e*01]   ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %100110
vmrg v*01,v*05,v*05[e*01]  ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %100111

vand v*01,v*05,v*05[e*01]  ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %101000
vnand v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %101001
vor v*01,v*05,v*05[e*01]   ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %101010
vnor v*01,v*05,v*05[e*01]  ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %101011
vxor v*01,v*05,v*05[e*01]  ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %101100
vnxor v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %101101
v056 v*01,v*05,v*05[e*01]  ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %101110
v057 v*01,v*05,v*05[e*01]  ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %101111

vrcp v*01,v*05,v*05[e*01]  ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %110000
vrcpl v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %110001
vrcph v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %110010
vmov v*01,v*05,v*05[e*01]  ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %110011
vrsq v*01,v*05,v*05[e*01]  ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %110100
vrsql v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %110101
vrsqh v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %110110
vnop v*01,v*05,v*05[e*01]  ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %110111

vextt v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %111000
vextq v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %111001
vextn v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %111010
v073 v*01,v*05,v*05[e*01]  ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %111011
vinst v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %111100
vinsq v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %111101
vinsn v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %111110
vnull v*01,v*05,v*05[e*01] ; %0100101 >>03d >>02d >>01d ~d ~c ~b >>04a >>03a >>02a >>01a ~a %111111

// RSP CP2 Vector Load Instructions (LWC2):
lbv v*05[e*01],*07(*01)  ; %110010 >>04d >>03d >>02d >>01d ~d ~a %00000 >>03b >>02b >>01b ~b ~c
lsv v*05[e*01],*07(*01)  ; %110010 >>04d >>03d >>02d >>01d ~d ~a %00001 >>03b >>02b >>01b ~b ~c
llv v*05[e*01],*07(*01)  ; %110010 >>04d >>03d >>02d >>01d ~d ~a %00010 >>03b >>02b >>01b ~b ~c
ldv v*05[e*01],*07(*01)  ; %110010 >>04d >>03d >>02d >>01d ~d ~a %00011 >>03b >>02b >>01b ~b ~c
lqv v*05[e*01],*07(*01)  ; %110010 >>04d >>03d >>02d >>01d ~d ~a %00100 >>03b >>02b >>01b ~b ~c
lrv v*05[e*01],*07(*01)  ; %110010 >>04d >>03d >>02d >>01d ~d ~a %00101 >>03b >>02b >>01b ~b ~c
lpv v*05[e*01],*07(*01)  ; %110010 >>04d >>03d >>02d >>01d ~d ~a %00110 >>03b >>02b >>01b ~b ~c
luv v*05[e*01],*07(*01)  ; %110010 >>04d >>03d >>02d >>01d ~d ~a %00111 >>03b >>02b >>01b ~b ~c
lhv v*05[e*01],*07(*01)  ; %110010 >>04d >>03d >>02d >>01d ~d ~a %01000 >>03b >>02b >>01b ~b ~c
lfv v*05[e*01],*07(*01)  ; %110010 >>04d >>03d >>02d >>01d ~d ~a %01001 >>03b >>02b >>01b ~b ~c
ltwv v*05[e*01],*07(*01) ; %110010 >>04d >>03d >>02d >>01d ~d ~a %01010 >>03b >>02b >>01b ~b ~c
ltv v*05[e*01],*07(*01)  ; %110010 >>04d >>03d >>02d >>01d ~d ~a %01011 >>03b >>02b >>01b ~b ~c

// RSP CP2 Vector Store Instructions (SWC2):
sbv v*05[e*01],*07(*01) ; %111010 >>04d >>03d >>02d >>01d ~d ~a %00000 >>03b >>02b >>01b ~b ~c
ssv v*05[e*01],*07(*01) ; %111010 >>04d >>03d >>02d >>01d ~d ~a %00001 >>03b >>02b >>01b ~b ~c
slv v*05[e*01],*07(*01) ; %111010 >>04d >>03d >>02d >>01d ~d ~a %00010 >>03b >>02b >>01b ~b ~c
sdv v*05[e*01],*07(*01) ; %111010 >>04d >>03d >>02d >>01d ~d ~a %00011 >>03b >>02b >>01b ~b ~c
sqv v*05[e*01],*07(*01) ; %111010 >>04d >>03d >>02d >>01d ~d ~a %00100 >>03b >>02b >>01b ~b ~c
srv v*05[e*01],*07(*01) ; %111010 >>04d >>03d >>02d >>01d ~d ~a %00101 >>03b >>02b >>01b ~b ~c
spv v*05[e*01],*07(*01) ; %111010 >>04d >>03d >>02d >>01d ~d ~a %00110 >>03b >>02b >>01b ~b ~c
suv v*05[e*01],*07(*01) ; %111010 >>04d >>03d >>02d >>01d ~d ~a %00111 >>03b >>02b >>01b ~b ~c
shv v*05[e*01],*07(*01) ; %111010 >>04d >>03d >>02d >>01d ~d ~a %01000 >>03b >>02b >>01b ~b ~c
sfv v*05[e*01],*07(*01) ; %111010 >>04d >>03d >>02d >>01d ~d ~a %01001 >>03b >>02b >>01b ~b ~c
swv v*05[e*01],*07(*01) ; %111010 >>04d >>03d >>02d >>01d ~d ~a %01010 >>03b >>02b >>01b ~b ~c
stv v*05[e*01],*07(*01) ; %111010 >>04d >>03d >>02d >>01d ~d ~a %01011 >>03b >>02b >>01b ~b ~c

// RSP MIPS 4000 CPU Pseudo Instructions (CPU):
move *05,*01 ; %000000 %00 %000 >>04b >>03b >>02b >>01b ~b ~a %000 %00100000
neg *05,*01  ; %000000 %00 %000 >>04b >>03b >>02b >>01b ~b ~a %000 %00100010
negu *05,*01 ; %000000 %00 %000 >>04b >>03b >>02b >>01b ~b ~a %000 %00100011

b *18 ; %000100 %00 %000 %00000 +4>>02a

beqz *01,*18 ; %000100 >>04a >>03a >>02a >>01a ~a %00000 +4>>02b
bnez *01,*18 ; %000101 >>04a >>03a >>02a >>01a ~a %00000 +4>>02b
)";
